<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>

<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/z-f3-f1/1@main/style.css"/>
<!-- Yandex Games SDK -->
<style>
        /* Убираем выделение по нажатию клавиш */
        canvas:focus {
            outline: none;
        }

        html, body {
            /* Убираем отступы */
            padding: 0;
            margin: 0;
            /* Отключаем скролл и лонгтап на IOS */
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            /* Ставим высоту на 100% */
            height: 100%;
        }
    </style>
<!-- Additional head modules -->
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas" tabindex="-1"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/ubgultra/ubgultra-assets@main/UBGUltra-Logo-We-Unblock.png"/></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<!-- Additional body modules -->
<script>
    const hideFullScreenButton = "";
    const buildUrl = "https://cdn.jsdelivr.net/gh/z-f3-f1/1@main/Build"; // jsDelivr URL
    const loaderUrl = buildUrl + "/yandexBrotli.loader.js";  // Loader dosyası

    // Birleştirilmiş dosyanın yükleneceği URL'ler
    const config = {
        dataUrl: buildUrl + "/yandexBrotli.data.br",  // .data.br dosyasını doğrudan yüklüyoruz
        frameworkUrl: buildUrl + "/yandexBrotli.framewor.js", // .framework.js.br dosyasını doğrudan yüklüyoruz
        // Bu satırdaki kodu değiştirdik: Artık .wasm.br dosyasını doğrudan yüklemeyeceğiz.
        // codeUrl: buildUrl + "/yandexBrotli.wasm.br",  // Buradaki satırı kaldırdık
        streamingAssetsUrl: "StreamingAssets",
        companyName: "Brain massage",
        productName: "Supercar Battle Royale",
        productVersion: "0.0.197"
    };

    // Dosyaları birleştirip yüklemek için kullanılan fonksiyon
    function loadAndMergeFiles(files, callback) {
        var mergedBlob = [];

        // Her dosyayı sırayla yükle
        var loadNextFile = function (index) {
            if (index < files.length) {
                var file = files[index];
                fetch(buildUrl + "/" + file)
                    .then(response => response.arrayBuffer())
                    .then(data => {
                        mergedBlob.push(new Uint8Array(data));
                        loadNextFile(index + 1);
                    })
                    .catch(error => {
                        console.error('Dosya yüklenemedi:', file, error);
                    });
            } else {
                // Tüm dosyalar yüklendiğinde, birleştirilmiş dosya ile callback'i çağır
                callback(new Blob(mergedBlob));
            }
        };

        loadNextFile(0);
    }

    // .wasm dosyası için parçalar
    var wasmFiles = [
        "yandexBrotli.wasm.br.part1",
        "yandexBrotli.wasm.br.part2"
    ];

    const container = document.querySelector("#unity-container");
    const canvas = document.querySelector("#unity-canvas");
    const loadingCover = document.querySelector("#loading-cover");
    const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
    const progressBarFull = document.querySelector("#unity-progress-bar-full");
    const spinner = document.querySelector('.spinner');

    const canFullscreen = (function () {
        for (const key of [
            'exitFullscreen',
            'webkitExitFullscreen',
            'webkitCancelFullScreen',
            'mozCancelFullScreen',
            'msExitFullscreen',
        ]) {
            if (key in document) {
                return true;
            }
        }
        return false;
    }());

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
    }

    // .wasm dosyasını birleştirip yükle
    loadAndMergeFiles(wasmFiles, function (mergedWasmBlob) {
        var mergedWasmFile = URL.createObjectURL(mergedWasmBlob);

        // Birleştirilen dosyayı Unity'ye yüklemek için kullanıyoruz
        config.codeUrl = mergedWasmFile;  // Birleştirilmiş .wasm dosyasının yolu

        // Unity başlatma ve yükleme
        var myGameInstance = null;
        var script = document.createElement("script");
        script.src = loaderUrl;
        script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
                progressBarFull.style.width = 100 * progress + "%";
            }).then((unityInstance) => {
                myGameInstance = unityInstance;
                loadingCover.style.display = "none";
            }).catch((message) => {
                alert(message);
            });
        };

        document.body.appendChild(script);
    });
</script>

<script>

        // Фоновое изображение при загрузке игры. При сборке билда код меняется взависимости от настроек проекта.
        
        loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/ubgultra/ubgultra-assets@main/UBGUltra-Game%20Loading.png') center / cover";

        loadingCover.style.display = "";

        // Выключаем появление меню при правом клике мыши
        document.addEventListener('contextmenu', event => event.preventDefault());

        // Возвращаем фокус, если кликнули по экрану
       function FocusGame() {
            window.focus();
            canvas.focus();
        }

        window.addEventListener('pointerdown', FocusGame);
        window.addEventListener('touchstart', FocusGame);

        let StartUnityInstance;
        let myGameInstance;
        let ysdk = null; // Yandex SDK pasif

        // Varsayılan değerlerle environmentData, cloudSaves, paymentsData ve playerData gibi değişkenlerin tanımlanması
        let environmentData = {
            language: "en",
            domain: "default_domain",
            deviceType: "desktop",
            isMobile: false,
            isDesktop: true,
            isTablet: false,
            isTV: false,
            appID: "default_app_id",
            browserLang: navigator.language || "en",
            payload: null,
            promptCanShow: false,
            reviewCanShow: false,
            platform: navigator.platform,
            browser: (function() {
                let userAgent = navigator.userAgent;
                if (userAgent.includes("YaBrowser")) return "Yandex";
                if (userAgent.includes("OPR") || userAgent.includes("Opera")) return "Opera";
                if (userAgent.includes("Firefox")) return "Firefox";
                if (userAgent.includes("MSIE") || userAgent.includes("Trident")) return "IE";
                if (userAgent.includes("Edge")) return "Edge";
                if (userAgent.includes("Chrome")) return "Chrome";
                if (userAgent.includes("Safari")) return "Safari";
                return "Other";
            })()
        };
        
        let cloudSaves = 'noData';
        let paymentsData = 'none';
        let playerData = 'noData'; // Varsayılan playerData tanımı
        let player = null;
        let payments = null;
        let initGame = false;
        let nowFullAdOpen = false;

        // Eksik olabilecek tüm SDK işlevlerini varsayılan olarak tanımla
        function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); }
        function SaveCloud() { console.warn("SaveCloud is not implemented"); }
        function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); }
        function InitPlayer() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); }
        function FullAdShow() { console.warn("FullAdShow is not implemented"); }
        function RewardedShow() { console.warn("RewardedShow is not implemented"); }
        function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); }
        function Review() { console.warn("Review is not implemented"); }
        function PromptShow() { console.warn("PromptShow is not implemented"); }
        function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); }
        function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); }
        function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); }
        function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); }
        function ConsumePurchases() { console.warn("ConsumePurchases is not implemented"); } // Varsayılan tanım eklendi

        function InitLeaderboard() { console.warn("ConsumePurchases is not implemented"); }

        function BuyPayments() { console.warn("ConsumePurchases is not implemented"); }







        // Hata yakalama ile Unity başlatma işlemi
        try {
            const script = document.createElement("script");
            script.src = loaderUrl;
            script.onload = () => {
                StartUnityInstance = function () {
                    createUnityInstance(canvas, config, (progress) => {
                        spinner.style.display = "none";
                        progressBarEmpty.style.display = "";
                        progressBarFull.style.width = `${100 * progress}%`;
                    }).then((unityInstance) => {
                        myGameInstance = unityInstance;
                        loadingCover.style.display = "none";
                    }).catch((message) => {
                        console.error("Unity yükleme hatası:", message);
                    });
                };
                StartUnityInstance();
            };
            document.body.appendChild(script);
        } catch (error) {
            console.error("Başlatma sırasında hata:", error);
        }

        function InitGame() {
            try {
                console.log('Init Game Success');
                initGame = true;
                if (nowFullAdOpen === true && myGameInstance != null) {
                    myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
                }
            } catch (error) {
                console.error("InitGame sırasında hata:", error);
            }
        }

        // Hata oluştuğunda oyuna devam etmek için tüm hataları global olarak yakalayan yapı
        window.addEventListener("unhandledrejection", function(event) {
            console.warn("Hata es geçildi:", event.reason);
            event.preventDefault();
        });
    </script>
</body>
</html>

]]></Content>
</Module>
